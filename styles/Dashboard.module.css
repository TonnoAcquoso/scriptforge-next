import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../utils/supabaseClient';
import Head from 'next/head';
import styles from '../styles/Dashboard.module.css';
import {
  ShieldCheck,
  FileText,
  Plus,
  Gavel,
  Search
} from 'lucide-react';

export default function Dashboard() {
  const router = useRouter();
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  // stati per modifica profilo
  const [showEditOptions, setShowEditOptions] = useState(false);
  const [pendingEdit, setPendingEdit] = useState<null | 'email' | 'password'>(null);
  const [inputValue, setInputValue] = useState('');
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [passwordStep, setPasswordStep] = useState<'verify' | 'change'>('verify');

  useEffect(() => {
    const getUser = async () => {
      const { data, error } = await supabase.auth.getUser();
      if (error || !data?.user) {
        router.push('/login');
      } else {
        setUser(data.user);
      }
      setLoading(false);
    };
    getUser();
  }, [router]);

  if (loading) return <p>Caricamento...</p>;

  return (
    <>
      <Head>
        <title>Dashboard Utente</title>
      </Head>

      <div className={styles.dashboardContainer}>
        <h1 className={styles.dashboardHeader}>
          Benvenuto, {user?.email?.split('@')[0]} ðŸ‘‹
        </h1>

        {/* âœ… Info utente */}
        <div className={styles.card}>
          <h2 className={styles.cardTitle}>Informazioni Utente</h2>
          <div className={styles.cardList}>
            <div><ShieldCheck size={16} /> Email: {user?.email}</div>
            <div><ShieldCheck size={16} /> Autenticazione MFA attiva</div>
          </div>
        </div>

        {/* âœ… Modifica profilo */}
        <div className={styles.card}>
          <h2 className={styles.cardTitle}>Modifica Profilo</h2>
          <p
            className={styles.toggleQuestion}
            onClick={() => setShowEditOptions(!showEditOptions)}
          >
            Vuoi modificare i tuoi dati?
          </p>

          {showEditOptions && (
            <div className={styles.editList}>
              <div className={styles.editItem}>
                <span>Email: {user?.email}</span>
                <button onClick={() => setPendingEdit('email')} className={styles.editButton}>Modifica</button>
              </div>
              <div className={styles.editItem}>
                <span>Password: *******</span>
                <button onClick={() => setPendingEdit('password')} className={styles.editButton}>Modifica</button>
              </div>
            </div>
          )}
        </div>

        {/* âœ… Accesso rapido */}
        <div className={styles.card}>
          <h2 className={styles.cardTitle}>Accesso Rapido</h2>
          <button className={styles.actionButton} onClick={() => router.push('/generatore')}>
            <Plus size={16} /> Nuovo Script
          </button>
          <button className={styles.actionButton} onClick={() => router.push('/raffina')}>
            <Gavel size={16} /> Raffina
          </button>
          <button className={styles.actionButton} onClick={() => router.push('/analisiscript')}>
            <Search size={16} /> Analizza
          </button>
        </div>

        {/* âœ… Popup Modifica Email */}
        {pendingEdit === 'email' && (
          <div className={styles.popupOverlay}>
            <div className={styles.popup}>
              <h3 className={styles.popupTitle}>Modifica Email</h3>
              <input
                type="email"
                placeholder="Inserisci nuova email"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                className={styles.inputField}
              />
              <div className={styles.popupActions}>
                <button
                  onClick={async () => {
                    if (!inputValue) return alert('Inserisci una nuova email.');
                    setLoading(true);
                    const { error } = await supabase.auth.updateUser({ email: inputValue });
                    setLoading(false);
                    setPendingEdit(null);
                    setInputValue('');
                    if (error) alert('Errore durante aggiornamento email.');
                    else alert('Email aggiornata con successo!');
                  }}
                  className={styles.confirmButton}
                >
                  Conferma
                </button>
                <button
                  onClick={() => {
                    setPendingEdit(null);
                    setInputValue('');
                  }}
                  className={styles.cancelButton}
                >
                  Annulla
                </button>
              </div>
            </div>
          </div>
        )}

        {/* âœ… Popup Modifica Password (2 step) */}
        {pendingEdit === 'password' && (
          <div className={styles.popupOverlay}>
            <div className={styles.popup}>
              <h3 className={styles.popupTitle}>
                {passwordStep === 'verify' ? 'Verifica Password Attuale' : 'Inserisci Nuova Password'}
              </h3>

              {passwordStep === 'verify' ? (
                <>
                  <input
                    type="password"
                    placeholder="Password attuale"
                    value={currentPassword}
                    onChange={(e) => setCurrentPassword(e.target.value)}
                    className={styles.inputField}
                  />
                  <div className={styles.popupActions}>
                    <button
                      onClick={async () => {
                        setLoading(true);
                        const { error } = await supabase.auth.signInWithPassword({
                          email: user?.email,
                          password: currentPassword,
                        });
                        setLoading(false);
                        if (error) alert('Password non corretta.');
                        else setPasswordStep('change');
                      }}
                      className={styles.confirmButton}
                    >
                      Verifica
                    </button>
                    <button
                      className={styles.cancelButton}
                      onClick={() => {
                        setPendingEdit(null);
                        setCurrentPassword('');
                        setNewPassword('');
                        setPasswordStep('verify');
                      }}
                    >
                      Annulla
                    </button>
                  </div>
                </>
              ) : (
                <>
                  <input
                    type="password"
                    placeholder="Nuova password"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    className={styles.inputField}
                  />
                  <div className={styles.popupActions}>
                    <button
                      onClick={async () => {
                        if (!newPassword) return alert('Inserisci una nuova password.');
                        setLoading(true);
                        const { error } = await supabase.auth.updateUser({ password: newPassword });
                        setLoading(false);
                        setPendingEdit(null);
                        setCurrentPassword('');
                        setNewPassword('');
                        setPasswordStep('verify');
                        if (error) alert('Errore durante aggiornamento.');
                        else alert('Password aggiornata con successo!');
                      }}
                      className={styles.confirmButton}
                    >
                      Conferma
                    </button>
                    <button
                      onClick={() => {
                        setPendingEdit(null);
                        setCurrentPassword('');
                        setNewPassword('');
                        setPasswordStep('verify');
                      }}
                      className={styles.cancelButton}
                    >
                      Annulla
                    </button>
                  </div>
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </>
  );
}