// /pages/api/genera.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();

  const { topic, niche, style, intensity, mode = 'generate', userScript = '' } = req.body;

  try {
    
    // Crea un nuovo thread di conversazione
    const thread = await openai.beta.threads.create();

    // ‚úÖ Prompt di raffinamento (fisso e professionale)
const refinePrompt = `
Migliora il seguente testo ottimizzando stile, grammatica, scorrevolezza, coerenza narrativa e impatto comunicativo.

Obiettivi specifici:
‚Äì Correggi errori grammaticali, sintattici e lessicali
‚Äì Migliora il ritmo e la fluidit√† delle frasi senza alterare il significato
‚Äì Elimina ripetizioni, ambiguit√† o espressioni poco efficaci
‚Äì Rafforza la coerenza logica tra le parti, mantenendo la struttura tematica
‚Äì Potenzia il tono e l‚Äôefficacia espressiva dove necessario
‚Äì Mantieni un registro professionale, chiaro e coinvolgente

Restituisci solo la versione migliorata, pronta per la pubblicazione o la lettura ad alta voce. Non aggiungere commenti o spiegazioni.

${userScript}
`;

// ‚úÖ Prompt classico per generazione
const generationPrompt = `
Crea uno script lungo (1200‚Äì1500 parole) in stile narrativo riflessivo ed epico, basato su questo personaggio/anime/tema: ‚Äú${topic}‚Äù

Lo script deve essere creato sulla base delle scelte dell‚Äôutente e sar√† quindi:
‚Äì Scorrevole e coinvolgente, con uno stile da documentario emotivo o storytelling YouTube
‚Äì Strutturato in forma narrativa fluida (no scalette), con transizioni psicologiche forti (es. ‚Äúed √® qui che tutto cambia‚Äù)
‚Äì Capace di evolversi nel tono (es. da riflessivo a epico)
‚Äì Perfettamente adatto alla registrazione audio

Includi obbligatoriamente:
‚Äì 1200/1500 parole di script e della durata di 10 minuti
‚Äì Voice-over integrato (tra parentesi: tono, ritmo, pause)
‚Äì Scene con timestamp verificati (episodio + minuto esatto, fonti affidabili)
‚Äì Approfondimenti culturali, psicologici o simbolici
‚Äì Montaggio suggerito: evidenzia i momenti visivi pi√π forti o emotivi
‚Äì Call to action narrativa *inserita nell‚Äôultima frase*, senza chiusura esplicita

Se possibile, aggiungi anche:
‚Äì Titolo YouTube ottimizzato per CTR e curiosit√†
‚Äì Descrizione SEO con parole chiave e hashtag

Una volta completato tutto, riscrivi lo script sotto forma di **testo esteso in stile parlato**, contenente tutto lo script in forma fluida e naturale, come se fosse gi√† pronto per essere registrato dal voice-over, senza sintesi o riassunti.

Queste sono le preferenze dell‚Äôutente:
‚Äì Nicchia: ${niche}
‚Äì Stile narrativo scelto: ${style}
‚Äì Intensit√† emotiva: ${intensity}
`;

// ‚úÖ Aggiungi il messaggio dell'utente al thread
await openai.beta.threads.messages.create(thread.id, {
  role: 'user',
  content: [
    {
      type: 'text',
      text: mode === 'refine' ? refinePrompt : generationPrompt,
    },
  ],
});

    // Avvia il run con l'Assistant personale
    const run = await openai.beta.threads.runs.create(thread.id, {
      assistant_id: 'asst_k8nUpECUsPnjCgPOfNdrs9el', // üîÅ Inserisci qui il tuo vero Assistant ID
    });

    // Aspetta che il run sia completato
    let result = null;
    for (let i = 0; i < 20; i++) {
      await new Promise((r) => setTimeout(r, 1500));
      const check = await openai.beta.threads.runs.retrieve(thread.id, run.id);
      if (check.status === 'completed') {
        result = check;
        break;
      }
    }

    if (!result) {
      return res.status(500).json({ error: 'Timeout durante la generazione dello script' });
    }

    // Recupera l'ultima risposta dell'assistente
    // Recupera tutti i messaggi
    const messages = await openai.beta.threads.messages.list(thread.id);
    console.log('MESSAGES:', JSON.stringify(messages.data, null, 2));
    // Trova il messaggio pi√π recente dell'assistente
    const lastAssistantMessage = messages.data.find((m) => m.role === 'assistant');

    if (!lastAssistantMessage) {
      console.warn('Nessun messaggio dell‚Äôassistente trovato');
      return res.status(200).json({ script: 'Nessuna risposta generata' });
    }

    // Cerca il contenuto di tipo "text"
    const textBlock = lastAssistantMessage.content.find((c) => c.type === 'text');
    console.log('TEXT BLOCK:', JSON.stringify(textBlock, null, 2));

   if (!textBlock || typeof textBlock.text?.value !== 'string') {
  console.warn('Nessun contenuto testuale valido nel messaggio:', lastAssistantMessage.content);
  return res.status(200).json({ script: 'Nessuna risposta generata' });
}

const script = textBlock.text.value.trim();
res.status(200).json({ script });
  }
  catch (error) {
  console.error(error);
  res.status(500).json({ error: 'Errore nella generazione con Assistant' });
}
} 